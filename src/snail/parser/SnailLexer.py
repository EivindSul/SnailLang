# Generated from Snail.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,43,267,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,1,0,1,0,1,1,1,1,1,2,1,2,1,
        2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
        6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
        1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,16,4,16,153,8,16,11,16,12,16,154,1,16,1,16,4,16,159,8,16,11,16,
        12,16,160,1,17,4,17,164,8,17,11,17,12,17,165,1,18,1,18,5,18,170,
        8,18,10,18,12,18,173,9,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,3,19,186,8,19,1,20,1,20,1,20,1,20,1,21,4,21,193,8,
        21,11,21,12,21,194,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,
        1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,
        1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,
        1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,4,40,
        244,8,40,11,40,12,40,245,1,41,1,41,1,41,1,41,5,41,252,8,41,10,41,
        12,41,255,9,41,1,41,1,41,1,41,1,41,1,42,4,42,262,8,42,11,42,12,42,
        263,1,42,1,42,0,0,43,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
        32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,
        43,1,0,5,1,0,48,57,1,0,34,34,1,0,97,122,2,0,10,10,13,13,2,0,9,9,
        32,32,275,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
        0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
        0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,
        0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,1,87,1,0,0,0,3,89,1,
        0,0,0,5,91,1,0,0,0,7,95,1,0,0,0,9,100,1,0,0,0,11,103,1,0,0,0,13,
        109,1,0,0,0,15,112,1,0,0,0,17,117,1,0,0,0,19,119,1,0,0,0,21,121,
        1,0,0,0,23,123,1,0,0,0,25,125,1,0,0,0,27,131,1,0,0,0,29,140,1,0,
        0,0,31,144,1,0,0,0,33,152,1,0,0,0,35,163,1,0,0,0,37,167,1,0,0,0,
        39,185,1,0,0,0,41,187,1,0,0,0,43,192,1,0,0,0,45,196,1,0,0,0,47,198,
        1,0,0,0,49,200,1,0,0,0,51,202,1,0,0,0,53,204,1,0,0,0,55,207,1,0,
        0,0,57,210,1,0,0,0,59,212,1,0,0,0,61,215,1,0,0,0,63,217,1,0,0,0,
        65,220,1,0,0,0,67,224,1,0,0,0,69,228,1,0,0,0,71,231,1,0,0,0,73,234,
        1,0,0,0,75,236,1,0,0,0,77,238,1,0,0,0,79,240,1,0,0,0,81,243,1,0,
        0,0,83,247,1,0,0,0,85,261,1,0,0,0,87,88,5,40,0,0,88,2,1,0,0,0,89,
        90,5,41,0,0,90,4,1,0,0,0,91,92,5,102,0,0,92,93,5,111,0,0,93,94,5,
        114,0,0,94,6,1,0,0,0,95,96,5,101,0,0,96,97,5,97,0,0,97,98,5,99,0,
        0,98,99,5,104,0,0,99,8,1,0,0,0,100,101,5,105,0,0,101,102,5,110,0,
        0,102,10,1,0,0,0,103,104,5,119,0,0,104,105,5,104,0,0,105,106,5,105,
        0,0,106,107,5,108,0,0,107,108,5,101,0,0,108,12,1,0,0,0,109,110,5,
        105,0,0,110,111,5,102,0,0,111,14,1,0,0,0,112,113,5,101,0,0,113,114,
        5,108,0,0,114,115,5,115,0,0,115,116,5,101,0,0,116,16,1,0,0,0,117,
        118,5,123,0,0,118,18,1,0,0,0,119,120,5,125,0,0,120,20,1,0,0,0,121,
        122,5,91,0,0,122,22,1,0,0,0,123,124,5,93,0,0,124,24,1,0,0,0,125,
        126,5,108,0,0,126,127,5,111,0,0,127,128,5,99,0,0,128,129,5,97,0,
        0,129,130,5,108,0,0,130,26,1,0,0,0,131,132,5,102,0,0,132,133,5,117,
        0,0,133,134,5,110,0,0,134,135,5,99,0,0,135,136,5,116,0,0,136,137,
        5,105,0,0,137,138,5,111,0,0,138,139,5,110,0,0,139,28,1,0,0,0,140,
        141,5,46,0,0,141,142,5,46,0,0,142,143,5,46,0,0,143,30,1,0,0,0,144,
        145,5,114,0,0,145,146,5,101,0,0,146,147,5,116,0,0,147,148,5,117,
        0,0,148,149,5,114,0,0,149,150,5,110,0,0,150,32,1,0,0,0,151,153,7,
        0,0,0,152,151,1,0,0,0,153,154,1,0,0,0,154,152,1,0,0,0,154,155,1,
        0,0,0,155,156,1,0,0,0,156,158,5,46,0,0,157,159,7,0,0,0,158,157,1,
        0,0,0,159,160,1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,34,1,0,
        0,0,162,164,7,0,0,0,163,162,1,0,0,0,164,165,1,0,0,0,165,163,1,0,
        0,0,165,166,1,0,0,0,166,36,1,0,0,0,167,171,5,34,0,0,168,170,8,1,
        0,0,169,168,1,0,0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,172,1,0,
        0,0,172,174,1,0,0,0,173,171,1,0,0,0,174,175,5,34,0,0,175,38,1,0,
        0,0,176,177,5,116,0,0,177,178,5,114,0,0,178,179,5,117,0,0,179,186,
        5,101,0,0,180,181,5,102,0,0,181,182,5,97,0,0,182,183,5,108,0,0,183,
        184,5,115,0,0,184,186,5,101,0,0,185,176,1,0,0,0,185,180,1,0,0,0,
        186,40,1,0,0,0,187,188,5,110,0,0,188,189,5,105,0,0,189,190,5,108,
        0,0,190,42,1,0,0,0,191,193,7,2,0,0,192,191,1,0,0,0,193,194,1,0,0,
        0,194,192,1,0,0,0,194,195,1,0,0,0,195,44,1,0,0,0,196,197,5,43,0,
        0,197,46,1,0,0,0,198,199,5,45,0,0,199,48,1,0,0,0,200,201,5,42,0,
        0,201,50,1,0,0,0,202,203,5,47,0,0,203,52,1,0,0,0,204,205,5,61,0,
        0,205,206,5,61,0,0,206,54,1,0,0,0,207,208,5,33,0,0,208,209,5,61,
        0,0,209,56,1,0,0,0,210,211,5,62,0,0,211,58,1,0,0,0,212,213,5,62,
        0,0,213,214,5,61,0,0,214,60,1,0,0,0,215,216,5,60,0,0,216,62,1,0,
        0,0,217,218,5,60,0,0,218,219,5,61,0,0,219,64,1,0,0,0,220,221,5,110,
        0,0,221,222,5,111,0,0,222,223,5,116,0,0,223,66,1,0,0,0,224,225,5,
        97,0,0,225,226,5,110,0,0,226,227,5,100,0,0,227,68,1,0,0,0,228,229,
        5,111,0,0,229,230,5,114,0,0,230,70,1,0,0,0,231,232,5,43,0,0,232,
        233,5,43,0,0,233,72,1,0,0,0,234,235,5,61,0,0,235,74,1,0,0,0,236,
        237,5,44,0,0,237,76,1,0,0,0,238,239,5,59,0,0,239,78,1,0,0,0,240,
        241,5,58,0,0,241,80,1,0,0,0,242,244,7,3,0,0,243,242,1,0,0,0,244,
        245,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,82,1,0,0,0,247,248,
        5,45,0,0,248,249,5,45,0,0,249,253,1,0,0,0,250,252,8,3,0,0,251,250,
        1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,256,
        1,0,0,0,255,253,1,0,0,0,256,257,3,81,40,0,257,258,1,0,0,0,258,259,
        6,41,0,0,259,84,1,0,0,0,260,262,7,4,0,0,261,260,1,0,0,0,262,263,
        1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,265,1,0,0,0,265,266,
        6,42,0,0,266,86,1,0,0,0,10,0,154,160,165,171,185,194,245,253,263,
        1,6,0,0
    ]

class SnailLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    FOR_KEYWORD = 3
    EACH_KEYWORD = 4
    IN_KEYWORD = 5
    WHILE_KEYWORD = 6
    IF_KEYWORD = 7
    ELSE_KEYWORD = 8
    BLOCK_START = 9
    BLOCK_END = 10
    LIST_START = 11
    LIST_END = 12
    LOCAL_KEYWORD = 13
    FUNCTION_KEYWORD = 14
    VARIADIC = 15
    RETURN_KEYWORD = 16
    FLOAT = 17
    INT = 18
    STRING = 19
    BOOL = 20
    NIL = 21
    ID = 22
    OP_ADD = 23
    OP_SUB = 24
    OP_MUL = 25
    OP_DIV = 26
    COMP_EQ = 27
    COMP_NEQ = 28
    COMP_GT = 29
    COMP_GEQ = 30
    COMP_LT = 31
    COMP_LEQ = 32
    BOP_NOT = 33
    BOP_AND = 34
    BOP_OR = 35
    SOP_CONCAT = 36
    ASSIGN = 37
    COMMA = 38
    SEMI = 39
    COLON = 40
    NEWLINE = 41
    COMMENT = 42
    WS = 43

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'for'", "'each'", "'in'", "'while'", "'if'", 
            "'else'", "'{'", "'}'", "'['", "']'", "'local'", "'function'", 
            "'...'", "'return'", "'nil'", "'+'", "'-'", "'*'", "'/'", "'=='", 
            "'!='", "'>'", "'>='", "'<'", "'<='", "'not'", "'and'", "'or'", 
            "'++'", "'='", "','", "';'", "':'" ]

    symbolicNames = [ "<INVALID>",
            "FOR_KEYWORD", "EACH_KEYWORD", "IN_KEYWORD", "WHILE_KEYWORD", 
            "IF_KEYWORD", "ELSE_KEYWORD", "BLOCK_START", "BLOCK_END", "LIST_START", 
            "LIST_END", "LOCAL_KEYWORD", "FUNCTION_KEYWORD", "VARIADIC", 
            "RETURN_KEYWORD", "FLOAT", "INT", "STRING", "BOOL", "NIL", "ID", 
            "OP_ADD", "OP_SUB", "OP_MUL", "OP_DIV", "COMP_EQ", "COMP_NEQ", 
            "COMP_GT", "COMP_GEQ", "COMP_LT", "COMP_LEQ", "BOP_NOT", "BOP_AND", 
            "BOP_OR", "SOP_CONCAT", "ASSIGN", "COMMA", "SEMI", "COLON", 
            "NEWLINE", "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "FOR_KEYWORD", "EACH_KEYWORD", "IN_KEYWORD", 
                  "WHILE_KEYWORD", "IF_KEYWORD", "ELSE_KEYWORD", "BLOCK_START", 
                  "BLOCK_END", "LIST_START", "LIST_END", "LOCAL_KEYWORD", 
                  "FUNCTION_KEYWORD", "VARIADIC", "RETURN_KEYWORD", "FLOAT", 
                  "INT", "STRING", "BOOL", "NIL", "ID", "OP_ADD", "OP_SUB", 
                  "OP_MUL", "OP_DIV", "COMP_EQ", "COMP_NEQ", "COMP_GT", 
                  "COMP_GEQ", "COMP_LT", "COMP_LEQ", "BOP_NOT", "BOP_AND", 
                  "BOP_OR", "SOP_CONCAT", "ASSIGN", "COMMA", "SEMI", "COLON", 
                  "NEWLINE", "COMMENT", "WS" ]

    grammarFileName = "Snail.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


